name: Main workflow

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  validate_commits:
    name: ðŸ“– Validate commit messages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Conventional commit lint
        uses: ahmadnassri/action-commit-lint@v2.1.17

  lint:
    name: ðŸ’… Lint
    needs: validate_commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Oxlint
        run: pnpm lint

  package_tests:
    name: ðŸ§ª Run package tests
    needs: validate_commits
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        run: pnpm build:packages

      - name: Test Packages
        run: pnpm test:packages

  find_examples:
    name: ðŸ”Ž Find examples
    needs: validate_commits
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.finds-examples.outputs.examples }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Finds examples
        id: finds-examples
        uses: ./.github/actions/find-examples

  examples_tests:
    name: âž¿ Run tests for examples
    runs-on: ubuntu-latest
    needs: find_examples
    strategy:
      fail-fast: false
      matrix:
        example: ${{ fromJson(needs.find_examples.outputs.examples) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup monorepo
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        shell: bash
        run: pnpm build:packages

      # Need to run "pnpm install" after build to link the CLI to .bin
      - name: pnpm install
        uses: ./.github/actions/pnpm-install

      - name: Build example
        shell: bash
        run: pnpm --filter "./examples/${{ matrix.example }}" build

      - name: Serve example
        shell: bash
        run: pnpm --filter "./examples/${{ matrix.example }}" start:tests &

      - name: Wait for server to be ready
        run: |
          for i in $(seq 1 20); do
            curl -f http://localhost:3000 > /dev/null && break
            echo "Waiting for server to be available..."
            sleep 1
          done

          # Check if the loop finished without success
          curl -f http://localhost:3000 > /dev/null || (echo "Server is not available after 20 seconds" && exit 1)

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "pnpm --filter \"./examples/${{ matrix.example }}\" exec playwright --version"

      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright's dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm --filter "./examples/${{ matrix.example }}" exec playwright install --with-deps

      - name: Run Playwright tests for ${{ matrix.example }}
        run: pnpm --filter "./examples/${{ matrix.example }}" test:playwright

      - name: Get installed Cypress version
        id: cypress-version
        run: |
          echo "pnpm --filter \"./examples/${{ matrix.example }}\" exec cypress --version | grep \"Cypress package version:\" | sed 's/Cypress package version: //g'"

      - uses: actions/cache@v3
        id: cypress-cache
        with:
          path: "~/.cache/Cypress"
          key: "${{ runner.os }}-cypress-${{ steps.cypress-version.outputs.version }}"
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress's dependencies
        if: steps.cypress-cache.outputs.cache-hit != 'true'
        run: pnpm --filter "./examples/${{ matrix.example }}" exec cypress install

      - name: Run Cypress tests for ${{ matrix.example }}
        run: pnpm --filter "./examples/${{ matrix.example }}" test:cypress

  deploy:
    name: Release packages
    runs-on: ubuntu-latest
    needs:
      - lint
      - package_tests
      - examples_tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed packages
        id: changed-packages
        uses: tj-actions/changed-files@v46.0.5
        with:
          base_sha: ${{ github.event_name == 'push' && github.event.before || '' }}
          files_yaml: |
            lockfile:
              - './pnpm-lock.yaml'
            packages:
              - packages/*/src/**
              - packages/*/tsconfig.json
              - packages/*/tsconfig.*.json

      - name: Setup monorepo
        if: steps.changed-packages.outputs.lockfile_any_changed == 'true' || steps.changed-packages.outputs.packages_any_changed == 'true'
        uses: ./.github/actions/setup-monorepo

      - name: Build packages
        if: steps.changed-packages.outputs.lockfile_any_changed == 'true' || steps.changed-packages.outputs.packages_any_changed == 'true'
        run: pnpm build:packages

      - name: Release packages (all)
        # Release all packages if the lockfile has changed
        if: steps.changed-packages.outputs.lockfile_any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm --filter "./packages/*" run release --dry-run

      - name: Release packages (changed)
        # Only release changed packages if the lockfile has not changed, but packages have changed
        if: steps.changed-packages.outputs.lockfile_any_changed == 'false' && steps.changed-packages.outputs.packages_any_changed == 'true'
        env:
          CHANGED_FILES: ${{ steps.changed-packages.outputs.packages_all_changed_files }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PACKAGES=$(echo "$CHANGED_FILES" | grep -oE "packages/[^/]+" | sed "s|packages/||" | sort -u)

          # Initialize an empty string to hold the formatted filters
          FILTERS=""

          # Iterate over each package name and build the command string with correct quotes
          if [ -n "$PACKAGES" ]; then
            for package in $PACKAGES; do
              FILTERS+=" --filter \"./packages/$package\""
            done

            # Run the release command with the correctly formatted filters
            pnpm $FILTERS run release --dry-run
          fi
